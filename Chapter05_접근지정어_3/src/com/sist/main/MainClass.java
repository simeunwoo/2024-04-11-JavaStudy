package com.sist.main;
import java.util.Scanner;

import com.sist.manager.MovieManager;
import com.sist.vo.Movie;
/*
 * 	변수
 * 
 * 	인스턴스변수
 * 	class A
 * 	{
 * 		[접근지정어] 데이터형 변수명;
 * 		클래스 블록 안에서만 선언 가능
 * 		=> 다른 클래스에서 사용 가능
 * 	}
 * 
 * 	정적변수 (static)
 * 	class A
 * 	{
 * 		[접근지정어] static 데이터형 변수명;
 * 		클래스 블록 안에서만 선언 가능
 * 		=> 다른 클래스에서 사용 가능
 * 	}
 * 	*** 모든 클래스가 공유할 수 있다 (공개) => 메모리 공간 1개만 생성
 * 
 * 	지역변수
 * 	void display()
 * 	{
 * 		데이터형 변수명;
 * 		메소드 안에서 선언
 * 		=> 접근지정어를 사용할 수 없다
 * 		=> static을 사용할 수 없다
 * 		=> 유일하게 사용 가능한 것 : final (상수)
 * 	}
 * 
 * 	*** 멤버변수 : static, 인스턴스변수 (객체변수)
 * 				=> 자동 초기화 => ex) int => 0, String => null (실제 저장된 데이터의 주소가 없는 상태) ...
 * 													  ----- => new 사용
 * 				*** 지역변수는 자동 초기화가 안된다 => 반드시 초기화를 하고 사용해야 한다
 * 
 * 	---------------------------------------------------------------------------------------------
 * 		종류			메모리에 저장되는 시점			사용 범위				메모리 해제				저장 위치
 * 	---------------------------------------------------------------------------------------------
 * 	인스턴스변수		new 클래스명()				클래스 전				프로그램 종료 시까지		Heap
 * 					=> 메모리 따로 저장			=> 다른 클래스도 가능
 * 	---------------------------------------------------------------------------------------------
 * 	정적변수 (static)	컴파일 시에 메모리에 저장		자신의 클래스 전체		프로그램 종료 시까지		MethodArea
 * 					접근 방식 : 클래스명.변수명		=> 다른 클래스도 가능
 * 					new 없이 저장 가능
 * 	---------------------------------------------------------------------------------------------
 * 	지역변수			메소드 호출 시마다 메모리 생성	메소드 안에서만 사용		메소드 종료 (return)	Stack : LIFO (Last In First Out)
 * 																					ex) 주차장
 * 	---------------------------------------------------------------------------------------------
 * 
 * 	인스턴스변수
 * 	class A
 * 	{
 * 		int a;
 * 		int b;
 * 		double c;
 * 		static int d;
 * 	}
 * 	----------------- new 사용 시 메모리 크기
 * 	=> A는 사용자 정의 데이터형 => 16byte => static은 제외 => A aa=new A();
 * 	*** 모든 클래스는 4byte (주소)
 * 	--- aa ---
 * 	  0x100
 * 	----------	0x100	-----------
 * 							0 => a
 * 						-----------
 * 							0 => b
 * 						-----------
 * 							0.0 => c
 * 						-----------
 * 
 * 	지역변수
 * 	void display()
 * 	{ =============================> 불러오기 순 : (a -> b -> c) => 삭제 순 : (c -> b -> a)
 * 		int a=10;
 * 		{
 * 			int b=20;
 * 			{
 * 				int c=30;
 * 			}
 * 		}
 * 	}
 * 
 *	-----------------
 * 		--------
 * 		시계
 * 		달력
 * 		게시판
 * 		-------- 공동 사물 => static
 * 		각자 컴퓨터
 * 		각자 책상
 * 		각자 사물함
 * 		-------- => 인스턴스
 * 
 * 		자바에서 사용하는 메모리
 * 		---------------------
 * 		Method Area => 메소드, static 변수
 * 		---------------------
 * 		Stack => 지역변수, 매개변수 => 메모리 자체 관리 => 메소드가 종료되면 자동으로 사라진다
 * 				 ------------- 메소드 안에서 사용 가능
 * 		---------------------
 * 		Heap => 배열, 클래스 멤버변수 => 프로그래머가 관리
 * 		---------------------
 * 		1. int malloc(sizeof(A)) : 메모리 할당
 * 			=> new
 * 			=> 프로그래머가 삭제에 소홀 : 프로그램을 종료 자동으로 운영체제에서 삭제
 * 			=> 변수가 많아지면서 문제 발생 => 가비지 컬렉션 (자동 메모리 회수)
 * 			=> 가비지 컬렉션을 회수할 때 프로그램 종료 시 쯤에 회수
 * 			=> 멀티미디어 : 직접 회수 : System.gc() (가비지 컬렉션)
 * 		2. free(A) : 메모리 해제
 * 			=> delete
 * 	-----------------
 * 
 * 	# 변수
 * 		저장하는 데이터가 여러개 => 따로 메모리를 만들어서 저장 : 인스턴스
 * 		저장하는 데이터가 1개 => static
 * 		사용하고 더 이상 필요 없다 => 지역변수
 */
public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scan=new Scanner(System.in);
		System.out.print("페이지 입력:");
		int page=scan.nextInt();
		Movie[] m=MovieManager.getMovieData(page);
		// 1. 목록
		System.out.println("=== 영화 목록 ===");
		// 메모리에 저장이 된 상태 => 컴파일 시에 메모리에 저장 => Method Area
		// static을 이용하면 메모리 공간이 1개 생성 => 모든 클래스에 공유 가능
		// 변경 => 모든 클래스에서 변경된 데이터를 사용
		for(Movie movie:MovieManager.movies) // movies(public) => 접근이 가능 static => 클래스명으로 접근
		{
			System.out.println(movie.getMno()+"."+movie.getTitle());
			// 값을 출력 / 값을 읽는 경우 : getXxx() / ex) 너 몇 살이야? 나 28살
			// 값을 저장 / 값을 변경 : setXxx() / ex) 너 이제 25살로 하자
		}
	}

}
