/* (필수 암기 - 변수 선언, 식별자, 데이터형)
 *  1. 변수 선언 (27page)
 *  	1) 변수 : 한개의 데이터를 저장하는 메모리 공간의 이름 ----- 주소, 방 느낌 => 저장한 데이터를 읽기/쓰기
 *  															 => 데이터 변경이 가능
 *  	2) 상수 : 한개의 데이터를 저장하는 메모리 공간의 이름 				 => 데이터 변경이 불가능 (상수 = 항상 같은 수)
 *  	
 *  	# 변수와 상수의 구분은 final
 *  	--- 데이터형 변수명 = 값 (변경 가능)
 *  	--- final 데이터형 상수명 = 고정값 (변경 불가)
 *  	3) 리터럴 : 실제 저장된 값 (메모리)
 *  
 *  2. 변수 명칭법 => 식별자(구분자) => 같은 곳에서 같은 이름의 변수는 사용이 불가능 => ex) int a=10,a=20; (불가능)
 *  	(26page)															ex) int a=10;
 *  																	int a=20;      (불가능)
 *  																ex) int a=10;
 *  																	a=20;		   (가능)
 *  	=> 알파벳, 한글로 시작 => ex) int 국어,영어,수학 / int kor,eng,math,Kor
 *  		(대소문자 구분)
 *  	=> 숫자 사용 (뒤에 사용이 가능) => ex) int kor1,kor2,kor3,...
 *  	=> 키워드는 사용할 수 없다 => 키워드 : int, byte, long, boolean, char,...
 *  							ex) int char (불가능) / int char1 (가능)
 *  	=> 공백이 있으면 안된다 => ex) int a b (불가능)
 *  	=> 특수문자는 사용이 가능 (위치는 상관없다) => _, $,... => _가 앞에 있는 경우는 임시변수 => _temp => 정렬
 *  	=> 클래스, 변수, 상수, 메소드, 인터페이스, 추상클래스, 배열,...
 *  
 *  3. 데이터형(타입), 기본형
 *  	(30page)
 *  	형식)
 *  		데이터타입 변수명;
 *  		------- 정수,실수,문자,논리
 *  		-------------------------------------------
 *  		정수형
 *  			byte => 1byte (사용범위 : -128~127)
 *  					사용처 : 파일읽기, 업로드, 다운로드, 네트워크 통신
 *  			int => 4byte (사용범위 : -21억4천~21억4천)
 *  					가장 많이 사용하는 정수형 (디폴트=default)
 *  					사용처 : 모든 프로그램의 정수형이 필요한 경우
 *  			long => 8byte (사용범위 : -2^63~2^63-1)
 *  					데이터 수집 => 라이브러리가 제작
 *  					ex) 영화 댓글들 중에서 긍정vs부정 댓글 비율 비교가 필요할 때 사용
 *  					사용처 : 금융권, 증권
 *  			bit = byte => 0이나 1만 저장하는 공간 (8bit => 1byte)
 *  			-------------------
 *  			 ㅣ음/양ㅣ ㅣ ㅣ ㅣ ㅣ ㅣ ㅣ => (한 공간에 8개)
 *  				1(음) (맨 앞에 0,1은 음양을 결정)
 *  				0(양)
 *  					ex) 11111111 => -128
 *  						01111111 => 127
 *  			-------------------
 *  		-------------------------------------------
 *  		실수형 : 소수점
 *  			   float => 4byte => 소수점 6자리 => ex) 10.5F(f)
 *  			   double => 8byte => 소수점 15자리 (실수형의 default) => ex) 10.5
 *  		-------------------------------------------
 *  		문자형 : char => 2byte (0~65535)
 *  			   문자는 양수로만 되어 있다
 *  			   => 표현하는 문자가 많이 있다
 *  			   => Unicode : 각국의 언어를 사용할 수 있다
 *  			   => char는 문자 한개만 저장이 가능 => ''
 *  				  			여러개 저장 => "" => char(X), char배열 => String
 *  			   => char는 저장 시 해당 번호로 변경해서 저장 => ASC코드
 *  					'A' => 65
 *  					'a' => 97
 *  					'0' => 48
 *  			   => 사용법 : char fname='홍';
 *  						 char alpha='A';
 *  			   => char는 연산 시 정수형으로 변경된다 / char는 연산 시 무조건 정수형으로 처리
 *  					'A'+1 => 66
 *  					"A"+1 => "A1"
 *  					7+"7"+7+7 => "7777" (계산은 왼쪽부터) => 문자열 결합
 *  					7+7+"7"+7 => "1477" (계산은 왼쪽부터) => 문자열 결합
 *  			*** 정수 표현법
 *  				10, 20 => 10진법
 *  				010 => 8진법
 *  				0x11 => 16진법
 *  				0b1000 => 2진법
 *  		-------------------------------------------
 *  		논리형 : boolean => true/false
 *  				조건이 있는 경우에 주로 사용
 *  				사용처 : 로그인, 검색어, 페이지 나누기
 *  			   boolean => 변수 설정
 *  						  bLogin
 *  						  bCheck
 *  			   1byte (0=false, 1=true)
 *  			   사용법 : boolean bCheck=false
 *  		-------------------------------------------
 *  		참조형 : 데이터를 여러개 한번에 저장하는 방법 (배열/클래스)
 *  
 *  		=== 01111111 (=127)
 *  		1) Change
 *  			0 -> 1
 *  			1 -> 0
 *  			10000000 => 1의 보수
 *  		  +		   1
 *  		 ------------
 *  			10000001 => 2의 보수
 *  
 *  4. 각 데이터형별 사용법
 *  
 *  5. 연산처리 => 제어
 */
public class 변수_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(1+7+"$'"+1+7); //8$'17
		System.out.println((int)'A'); // 65
		System.out.println((int)'a'); // 97
		System.out.println((int)'0'); // 48
		System.out.println((int)'+'); // 43
		System.out.println((int)'+'+'A'); // 108
		System.out.println(1010); // 1010
		System.out.println(0b1010); // 10
		System.out.println(01010); // 520
		System.out.println(0x1010); // 4112
		System.out.println(16*16*16+16); // 4112
		float f=10.5F;
		double d=10.5; // (double d=10.5D;로 표기해도 문제 없음)(D는 생략해도 되고 안해도 됨)
	}

}
