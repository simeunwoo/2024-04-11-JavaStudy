/*
 * 	배열 선언
 * 	------
 * 	=> 선언과 동시에 초기화
 * 		int[] arr={10,20,30,40,50} => 사용빈도는 거의 없다
 * 				  ---------------- 갯수 확인 => 데이터형 => 연속적으로 메모리를 만든다
 *		=> String[]에서는 값을 설정하고 사용한다
 *		=> int => 5개의 공간을 만들어준다
 *		=> 인덱스 값 = 첨자
 *		=> arr=0x100 => 첫번째 값
 *		   0x100로부터 두번째 값 => arr[1] : 일반 변수와 동일하게 취급 => 값 출력 및 변경 가능
 *		=> arr[1]=200 => 변경
 *
 *	=> 선언/초기값
 *		데이터형[] 배열명; => 권장
 *				----- 변수의 식별자와 동일
 *		데이터형 배열명[]; => C언어
 *
 *		=> 데이터형 : 배열에 저장되는 데이터 종류 (어떤 데이터를 저장할 지)
 *			정수 : int[] / 실수 : double[] / 문자 : char[] / 문자열 : String[]
 *		=> [] : 같은 데이터를 모아서 관리 => 배열 기호 => 메모리 주소값
 *		=> 배열명 : 실제값을 가지고 있는 것이 아니라 실제 데이터가 저장되어 있는 위치 주소
 *		   ---- 주소를 참조해서 여러개의 데이터 관리 => 참조 변수
 *
 *	=> 기본값으로 초기화
 *		데이터형[] 배열명=new 데이터형[갯수]
 *		int = 0 / double = 0.0 / boolean = false (따로 설정하지 않았을 때 나오는 초기값들)
 *		int[] arr=new int[3]; => 0 0 0
 *		double[] arr=new double[3] => 0.0 0.0 0.0
 *		boolean[] arr=new boolean[3] => false false false
 *
 *	*** 변수 : 실제 저장값 (사람 같은 느낌)
 *	*** 배열 / 클래스 : 저장된 위치 메모리 주소값 (집 같은 느낌)
 *								  ----- 여러개의 데이터를 관리 => 참조형
 *		배열 => 인덱스를 이용하여 데이터를 가지고 온다, 수정
 *		클래스 => 인덱스가 없다
 *		-----------------
 *		주소 접근 연산자 => .
 */
public class 배열_3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int [] arr= {10,20,30,40,50};
		System.out.println("arr="+arr);
		/*
		 * [I@4359esa24] => 메모리 주소값
		 */
	}

}
