package com.sist.main;
/*
 * 	8장 => 263page
 * 	=> 예외 처리
 * 		= 최적화 : 실행 속도
 * 		= 가독성 : 보기 편하게 => 쉽게
 * 		= 견고성 : 프로그램이 비정상 종료가 되지 않게
 * 		= 에러를 사전에 방지 => 비정상 종료를 방지하는 프로그램
 * 
 * 	=> 자바
 * 		에러 => 수정이 불가능한 에러 (메모리가 부족, 스레드 충돌)
 * 		예외 처리 => 소스 상에서 수정이 가능한 에러 (파일명 오류, URL 주소 오류 ...)
 * 		# 에러가 발생하는 요소
 * 		1. 사용자의 입력 부주의 : 잘못된 입력이 있는 경우 (정수 => 문자열)
 * 		2. 프로그래머의 실수 : 배열의 범위 초과, 반복 수행 ... 클래스 메모리 할당이 없는 상태에서 사용
 * 						변수의 초기화가 없는 상태 ..., 잘못되 ㄴ입력
 * 
 * 	=> 예외 처리
 * 		= 사전에 에러 방지
 * 		= 비정상 종료를 방지하고 => 정상 상태 유지
 * 		= 예외 처리 => 에러 발생 시 에러 부분을 건너 뛴다
 * 		(에러를 수정해 주는 것은 아니다)
 * 
 * 	=> 예외 처리 방법
 * 		= 예외 복구 : try ~ catch
 * 			try : 정상 수행
 * 			catch : 에러 발생 시 처리 => 복구
 * 		= 예외 회피 : 처리하지 않고 => 예외 발생 시 시스템에 의하여 처리
 * 					메소드 뒤에 첨부
 * 					메소드() throws 예외 처리
 * 		= 임의 발생 : 테스트용으로 주로 사용 => 프로그램이 정상적인지 확인
 * 					throw => 에러를 발생 => 확인 (견고한)
 * 		= 사용자 정의 예외 : 자바에서 지원하지 않는 예외 처리가 존재 => 필요 시 직접 예외 처리를 만들어서사용
 * 	
 * 	=> 예외 처리의 상속도 => 처리하는 순서가 존재
 * 		Object
 * 		|
 * 		Throwable : 에러 처리 최상위 클래스
 * 		|
 * 		-------------------------
 * 		|						|
 * 		Error					Exception
 * 		=> 처리가 불가능			=> 처리가 가능 (소스상)
 * 		=> 종료 후에 다시 시작		=> 0으로 나누는 경우
 * 								=> URL 주소나 IP, 파일이 틀리다
 */
public class 예외처리_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
