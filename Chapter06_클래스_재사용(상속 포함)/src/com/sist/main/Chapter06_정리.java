package com.sist.main;
/*
 * 	객체 지향 프로그램
 * 	1) 데이터 보호 => 캡슐화
 * 		데이터 은닉화 : private / 메소드를 통하여 접근 가능 : getter/setter
 * 	2) 상속: 기존의 클래스를 재사용
 * 		상속 : 변경해서 사용 (사용빈도 低) / 포함 : 있는 그대로 사용 (사용빈도 多)
 * 		상속을 잘 안쓰는 이유
 * 		=> 메모리 누수 현상
 * 		=> 상위 클래스 메모리 할당 ~> 하위 클래스 메모리 할당 : 메모리 사용이 많다
 * 		=> 상위 클래스에 맞게 사용 => 제약이 많다
 * 		=> 결합성이 높아진다 => 수정 시에 다른 클래스에 영향을 많이 미친다
 * 		=> 속도가 늦다 => 가급적이면 상속을 하지 말라
 * 		---------------------------------------- 수정 시에 다른 클래스에 영향을 많이 미친다
 * 		=> 윈도우 프로그램 : 상속
 * 		=> 웹 프로그램 : 상속이 거의 없다 => Spring => POJO
 * 	3) 다형성 : 여러 형태 : 같은 메소드명으로 다른 기능을 제작 => 오버로딩, 오버라이딩
 * 		=> 새로운 기능 추가 : 오버로딩
 * 		=> 기존의 기능 변경 : 오버라이딩
 * 		=> 오버로딩(new) / 오버라이딩(modify) => 면접 주요 질문
 * 		오버라이딩 : 모든 내용이 동일 (리턴형, 매개 변수, 메소드명, 접근지정어)
 * 		오버로딩 : 메소드명만 동일
 * 
 * 	===> 객체 지향의 3대 특성 (권장) => 재사용, 수정, 추가 => 유지 보수
 *
 * 	클래스 구성 요소
 * 		클래스 : 설계
 * 			= 필요한 데이터 추출 : 변수
 * 			= 기능 추출 : 메소드
 * 			= 필요 시에는 초기화 : 생성자 (생략이 가능)
 * 		메모리에 저장 => 인스턴스 => new
 * 		사용 => 객체 => new로부터 생성
 * 	
 * 		객체 : 관련된 데이터와 메소드를 관리하는 메모리 영역 (변수 => 데이터값을 관리)
 * 			define은 중요하지 않다
 * 			=> 권위가 있는 사람이 이름 부여 => ex) 하둡 : 개발자의 아들의 장난감 이름, 클라우드 : 구름
 * 
 * 	class className{
 * 	클래스 영역에서는
 * 	=> 제어문, 연산 처리, 값을 다시 대입 => 불가능
 * 	=> 선언, 선언과 동시에 값을 대입 => 가능 (ex) int a; int a=100;)
 * 	-----------------------------------------------
 * 	변수
 * 	= 인스턴스 변수 (중심) => 멤버 변수 => Heap
 * 		메모리 영역을 만들어서 저장 : new 사용 => 따로 저장하는 메모리 공간을 만든다 => 클래스는 1개의 정보 설정
 * 								학생 => 1명에 정보를 추출 => 여러명 => new
 * 								클래스명 객체명=new 생성자(); 객체명.변수명
 * 	= static 변수 => 공통 변수 => Method Area => 메모리가 1개만 생성
 * 		컴파일러에 의하여 생성
 * 		접근 시에는 클래스명.변수명
 * 	-----------------------------------------------
 * 	메소드 : 변수 활용
 * 		Genie 뮤직 => 목록 출력, 상세 보기, 동영상, 음반 판매, ...
 * 	-----------------------------------------------
 * 	초기화 => 데이터베이스/파일/크롤링 => 생성자 (***생략 가능 => 자동으로 생성자를 추가)/static {}
 * 	-----------------------------------------------
 * 	}
 * 	=> new 연산자 => 메모리에 변수/메소드가 동시에 저장
 */
public class Chapter06_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
