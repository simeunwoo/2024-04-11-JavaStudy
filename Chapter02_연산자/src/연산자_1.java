/*
 * 	자바의 기본 문법
 * 		=> 1. 데이터 저장
 * 			  변수 / 상수 => 변수 : 데이터를 한개만 저장하는 공간
 * 						   ㅣ 메모리 공간 크기 결정 => 정수/실수/문자/논리
 * 											  => 기본 저장 크기를 제공 (기본 데이터형)
 * 											  => 변수 : 변경해서 사용이 가능
 * 											  => 상수 : 변경할 수 없는 공간
 * 			  배열 : 여러개를 동시에 저장 (같은 형만 저장이 가능)
 * 			  클래스 : 여러개를 동시에 저장 => 다른 데이터형을 저장할 수 있다
 * 		=> 2. 데이터 가공 (사용자 요청 시)
 * 			  연산자 / 제어문
 * 			  -----------
 * 			  => 메소드
 * 		=> 3. 가공된 데이터를 출력
 * 			  => 명령프롬프트 : Application => 윈도우
 * 			  => 브라우저 : Web Application *****
 * 			  => 핸드폰 : Mobile Application => Java(X), Kotlin, Flutter(Dart)
 * 		=> 4. 데이터 분석
 * 			  파이썬 => AWS
 * 	객체 지향 프로그램
 * 	예외처리
 * 	라이브러리 활용
 * 	--------------
 * 	1) 오라클 연결
 * 	2) Web => JSP => JQuery(Ajax) => 1차 프로젝트<팀>
 * 	3) Spring => VueJS => 2차 프로젝트<팀>
 * 	4) Spring-Boot => React => 3차 프로젝트<개인>
 * 	5) Python : Numpy, Pandas(데이터 수집?), Matplotlib(그래프, 시각화)
 *  6) AWS (클라우드) => 호스팅
 *  *** Full Stack : JavaScript => 동적 페이지
 *  	JQuery(Ajax), VueJS, React(Redux, React-Query)
 *  	*** TypeScript, NextJS
 *  
 *  *** 입문 과정 => 입사 (실무) (이력서 제출)
 *  *** Order
 *  
 *  ===========================================================================
 *  
 * 	2024-04-15 / 연산자
 * 
 * 	1) 변수 : 데이터 1개만 저장하는 메모리 공간
 * 		데이터를 저장하기 위한 작업
 * 		1. 메모리에 별칭 설정 => 주소 대신 이름으로 저장 (간소화 느낌)
 * 			0번지 -----
 * 				 사용중
 * 			4번지 -----
 * 				 사용중
 * 			8번지 -----
 *				 저장 ===> 이름을 부여 => 변수
 *			12번지 -----
 * 			** 식별자 => 한개의 클래스 내에서는 같은 변수명 사용 X
 * 			= 알파벳이나 한글로 시작한다 (알파벳은 대소문자 구분)
 * 			= 문자의 갯수는 제한이 없다 (단 일반적으로 3~10자로 압축) => 어떤 데이터가 저장되어 있는지 확인
 * 			= 숫자 사용 가능 (앞에 사용 금지)
 * 			= 특수문자 사용 가능 (_,$) => 위치는 상관 없다
 * 			= 키워드 : 자바에서 사용하는 문자열(단어) => ex) int, double,... (빨간색)
 * 											   ex) int int (오류)
 * 			= 공백 사용 불가능 => ex) int a b (오류)
 * 		2. 메모리 크기 (데이터형)
 * 			--------------------------
 * 			정수
 * 			byte (1byte) => 네트워크 통신, 외부 데이터 읽기(크롤링), 파일 업로드 / 파일 다운로드
 * 				형식) byte 변수명 = 값
 * 					 => 값은 -128~127까지만 사용 가능
 * 					 => byte는 연산처리가 되면 결과값 int => ex) byte + byte = int
 * 													(더했을 때 byte의 범위를 초과할 수도 있기 때문)
 * 			int (4byte) => 프로그램에서 가장 많이 사용되는 데이터형 (정수 default)
 * 						=> 컴퓨터에서 모든 정수는 기본적으로 int를 인식
 * 				형식) int 변수명 = 값
 * 					 => 값은 -21억4천~21억4천까지만 사용 가능
 * 			long (8byte) => 금융권, 빅데이터, AI
 * 				형식) long 변수명 = 값
 * 					 => 큰값이면 설정
 * 			*** 구분자
 * 			int a = 100 (4byte로 저장)
 * 			long b = 100L (8byte로 저장) (L/l)
 * 			--------------------------
 * 			실수 : 소수점까지 저장
 * 			float (4byte) => 많이 사용하지는 않는다
 * 						  => 실수점 6자리까지 인식
 * 						  => 구분자 : F/f
 * 				형식) float f = 10.5 (오류) (오른쪽에 double로 표기됨)
 * 					 float f = 10.5f(F)
 * 			double (8byte) => 가장 많이 사용되는 실수 데이터형 (실수 default)
 * 						   => 실수점 15자리까지 인식
 * 			***** 정수 < 실수 => 크기 비교는 바이트 크기가 아니라 수에 대한 표현으로 비교
 * 				  byte < int < long < float < double
 * 			--------------------------
 * 			문자
 * 			char (2byte) => 음수가 없다 (0~65535)
 * 				=> 각국의 언어를 표현 => Unicode => 호환성이 좋다
 * 				값은 => 문자 '', 정수값 사용이 가능
 * 				형식) char a = 'A'
 * 					 char b = 65 (예외 사항)
 * 					=> char는 연산처리 시에 정수형으로 변경 (고유번호)
 * 						ex) 'A' => 65
 * 							'a' => 97
 * 							'0' => 48
 * 			--------------------------
 * 			논리
 * 			boolean (1byte) => true/false만 저장 가능
 * 							=> 조건 / 제어문
 * 				형식) boolean b = true
 * 			*** 크기는 비교할 수 없다
 * 			*** 기본 연산이 안된다
 * 			------- 부정연산자, 비교연산자, 논리연산자, 삼항연산자
 * 			------- 산수연산자(X)
 * 			--------------------------
 * 			참조형 (배열, 클래스) => 메모리 주소 이용
 * 			--------------------------
 * 		3. 변수 형식
 * 			데이터형 변수명;
 * 			사용 시 반드시 '변수명=값'을 대입해야 사용 가능
 * 				byte b;
 * 				b=10;
 * 				int a=10;
 * 				long l=100L;
 * 		4. 초기값
 * 			임의로 지정 => 변수(필요 시에 따라 변경 가능)
 * 			1) 선언 => 초기값
 * 				ex) 사용자로부터 값을 받을 경우, 난수 (임의로 추출)
 * 			2) 선언과 동시에 초기값 설정
 * 				ex) int a=10;
 * 
 * 	2) 연산처리
 */
public class 연산자_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
