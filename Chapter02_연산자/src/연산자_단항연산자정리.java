/*
 * 	연산자 => 사용자 요청에 따라 처리하는 기능
 * 
 * 	프로그램
 * 		데이터 저장 ====================================> 데이터 처리 =======> 화면 출력
 * 		= 한개 (변수)								    수정 / 삭제 / 읽기
 * 		------------------							=> 제어문, 연산자
 * 		= 여러개 (배열, 클래스)						=> '변수 / 제어문 / 연산자'로 프로그램 짠다
 * 		------------------					(같은 기능별 묶음 - ex) 게시판, 댓글, 회원 가입, 예약,...)
 * 		= RAM에 저장 (휘발성 메모리)						=> 재사용
 * 			=> 프로그램 종료 시 자동으로 사라진다
 * 		------------------
 * 		= 영구적인 저장 장치
 * 			=> 파일
 * 			=> RDBMS (오라클 : 탈퇴 이전까지 절대 안 지워진다)
 * 		------------------
 * 		회원 가입
 * 		---------------------------------------------------
 * 		연산 처리
 * 
 * 		1) 단항연산자
 * 			연산 대상이 1개인 경우
 * 			=> 증감연산자 (1개 증가, 1개 감소) => ++, --
 * 				전치 연산자 (먼저 증가) => ex) ++a, --a
 * 				후치 연산자 (나중에 증가) => ex) a++, a--
 * 			=> 부정연산자 => boolean에서만 사용 가능 => ! (true=>false, false=>true)
 * 				조건문에서 주로 사용
 * 			=> 형변환연산자 => 숫자와 관련된 데이터만 가능
 * 						-------> UpCasting
 * 				byte < char < int < long < float < double
 * 						<------- DownCasting
 * 						*** char는 연산 시 자동으로 정수로 변경됨
 * 						*** 각 문자마다 번호가 있다 => 아스키 코드값
 * 				(데이터형)값
 * 				--------- 변경
 * 			=> 반전연산자 => 양수를 음수로 변경할 때 사용 => (~)
 * 
 * 		2) 이항연산자
 * 			연산 대상이 2개인 경우
 * 			=> 산술연산자 => 같은 데이터형을 만들어 놓고 시작한다 (같은 데이터형끼리만 연산 가능)
 * 				+, -, *, /, %
 * 				=> +
 * 					1) 일반 산술 (더하기)
 * 					2) 문자열 결합 "7"+7 => "77"
 * 				=> -, * => 뺄셈 및 곱셈만 사용 가능
 * 				=> /
 * 					1) 0으로 나눌 수 없다 (사용자가 0을 입력할 수 없게 제어)
 * 					2) 정수/정수 = 정수 (소수점 필요 시 => 정수/실수 = 실수)
 * 				=> % => 나누고 나머지 => 결과값의 부호는 왼쪽과 동일
 * 					- % + => -
 * 					- % + => -
 * 					+ % + => +
 * 					+ % - => +
 * 				---------------- 가장 많이 사용되는 연산자
 * 			=> 우선 순위
 * 				*, /, % => +, -
 * 				System.out.println(5+5+5*5); // 35
 * 				"7"+7*7 => "749"
 * 
 * 		3) 삼항연산자
 */
public class 연산자_단항연산자정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("7"+7+7); // 777
		System.out.println("7"+7*7); // 749
		System.out.println("7"+(7+7)); // 714 => 우선 순위는 변경이 가능
										//		=> () : 최우선 순위 연산자
		// byte, char => int 이하 데이터형 => 연산 결과값은 int
		byte b1=127;
		byte b2=40;
		int b3=b1+b2;
		byte b4=(byte)(b1+b2);
		System.out.println("b3="+b3); // b3=167
		System.out.println("b4="+b4); // b4=-89
	}

}
