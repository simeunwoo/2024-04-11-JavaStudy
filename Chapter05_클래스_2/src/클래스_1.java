/*
 * 	프로그램
 * 
 * 	요구사항 분석 ===> 데이터베이스 설계 ===> 화면 UI ===> 구현 ===> 테스트 ===> 배포
 * 	1) 필요한 데이터	데이터 값을 저장					웹 프로그래머			발표
 * 	2) 기능 설정
 * 	---------- 클래스 (설계)
 * 	=> 프로그램에 필요한 데이터 -> 변수
 * 	=> 기능 설정			 -> 메소드
 * 	--------------------
 * 	변수의 집합 + 메소드
 * 		|
 * 	   초기값 => 생성자
 * 	-------------------- 관리 => 영역 (객체) => 메모리에 저장 후 사용
 * 											--------- 객체
 * 
 * 	현실 세계에 있는 모든 사물 => 단순화
 * 	예)
 * 		사원 => 시뮬레이션 (가정)
 * 		=> 프로그래머가 알 수 있게 설계
 * 		사번 / 이름 / 부서명 / 직위 / 입사일 / 연봉 / 그눔지 => 변수 => 한명에 대한 설계
 * 		출근한다 / 퇴근한단 / 점심을 먹는다 ... 메소드
 * 	1) 객체 지향 프로그램
 * 		1. 변수 설정 => 어떤 데이터를 관리 (눈에 보인다)
 * 		2. 기능 => 메뉴
 * 	2) 설계
 * 		--------------- 설계 => 한개에 대해서만 설계 => new를 이용해서 여러개를 저장
 * 						맛집 1개, 학생 1명, 영화 1개
 * 		class ClassName
 * 		{
 * 		}
 * 		--------------- 메모리에 저장 => 관리
 * 	3) 클래스의 구성 요소
 * 		class className
 * 		{
 * 			------------------------
 * 			변수묶음
 * 
 * 			1. 변수의 종류
 * 			# 객체변수 => new를 이용해서 저장 시마다 메모리가 달라진다 (저장 공간이 따로 생긴다)
 * 				=> 인스턴스 변수 (메모리에 저장된 상태) => (객체 = 인스턴스)
 * 			# 공통변수 => 모든 객체가 동일한 변수를 사용
 * 				=> static => 메모리 공간을 한개만 생성
 * 
 * 			2. 데이터를 보호 : 다른 프로그램에서 사용이 안되게 만든다 => 감춘다 (은닉화)
 * 			   --------- 자체 프로그램에서는 사용 가능 (캡슐화)
 * 			   --------- 접근지정어
 * 			------------------------
 * 			초기화 (변수)
 * 
 * 			1. 명시적인 초기화
 * 				int a=10; => 특별한 경우 아니면 거의 사용 X
 * 
 * 			2. 초기화 블록
 * 				=> 인스턴스 블록
 * 				class ClassName
 * 				{
 * 					변수
 * 					{
 * 						인스턴스 블록 => 구현 => 웹에서 주로 사용
 * 								=> 자동 로그인, 쿠키 읽기, 세션 등록 ... 데이터베이스 연동
 * 								=> 윈도우에서 화면 UI
 * 								=> 인스턴스, static 변수 초기화가 가능
 * 					}
 *
 * 				}
 * 				*** 클래스 영역
 * 				class ClassName
 * 				{
 * 					구현(X), 선언만 가능
 * 					------ 연산자/라이브러리 메소드 호출, 파일 읽기, 데이터베이스 연동, 제어문 => 구현
 * 							{} 안에서 사용
 * 				}
 * 
 * 				=> 정적 블록
 * 				class ClassName
 * 				{
 * 					static
 * 					{
 * 						static 변수만 초기화 가능 => new를 이용하지 않고 자동으로 저장이 되게 만든다
 * 						---------- 단점 : 저장된 모든 객체가 공통으로 사용하는 변수
 * 					}
 * 				}
 * 
 * 				=> 보통 사용하는 초기화
 * 					=> 생성자 => 메모리에 저장 시에 반드시 호출
 * 							   ---------
 * 								| new Scanner()
 * 									  --------- 생성자 => 클래스명과 동일
 * 								   |	| 생성자는 변수의 초기화 => 값을 저장
 * 								  연산자
 * 								1. 클래스의 메모리의 크기를 확인
 * 								2. 메모리에 저장 => 메모리 확보 => 메모리 주소를 객체에 전송
 * 
 * 				예)
 * 				class A
 * 				{
 * 					int aa; => 0으로 초기화 => 클래스 영역에서는 자동으로 초기화
 * 					int bb; => 0으로 초기화
 * 				}
 *
 * 				int[] arr={1,2}
 *
 *				-- arr --
 *				0x100		 0x100의 첫번째값 0x100의 두번째값
 *							 arr[0]		arr[1] => 인덱스를 이용하는 방법 => 메모리 크기가 동일
 *				--------- => -----------------
 *								 1	 |	 2
 *							 |----------------
 *							0x100
 *						*** 데이터를 설계 => 메모리가 크기가 다른 것이 있다
 *
 *			1) 클래스 저장
 *				A a=new A()
 *					---
 *					 |
 *				--- a ---
 *				  0x100
 *				---------	=>	0x100 -----------
 *								------ aa
 *									0
 *								---------
 *
 *								------ bb
 *									0 => 초기값을 저장해주는 역할 => 생성자
 *								---------
 *
 *				A b=new A() => new => 따로 메모리가 생성이 된다
 *					---			 => 접근하는 범위는 해당 주소에서만 사용 가능
 *					 |
 *				--- b ---
 *				  0x100
 *				---------	=>	0x200 -----------
 *								------ aa
 *									0
 *								---------
 *
 *								------ bb
 *									0
 *								---------
 *
 *				=> new는 사용할 때마다 따로 메모리 생성 (클래스 크기만큼) => 제한 (하드디스크 크기만큼 사용 가능)
 *				=> new를 이용해서 저장되는 내용
 *					1. 변수, 2. 메소드 ===> 관리하는 역할 => 객체
 *													 ----
 *													 사용자 정의 데이터형에 대한 변수
 * 			------------------------
 * 			기능 설정 => 메소드 (웹에서는 동작)
 * 							키보드 입력 (검색, 회원가입, 글쓰기,...)
 * 							마우스 클릭 (상세보기)
 * 							메뉴 클릭 => 메소드 (동작)
 * 					=> 메소드의 종류
 * 					1) 일반 메소드 (객체 메소드) => 객체마다 따로 저장되는 메소드
 * 						[접근지정어] 리턴형 메소드(매개변수...)
 * 						{
 * 							=> 기능 처리
 * 						}
 * 					2) 공통 메소드 : 객체가 동일하게 사용하는 메소드
 * 						[접근지정어] static 리턴형 메소드 (매개변수...)
 * 						{
 * 							=> 한글 변환, 데이터베이스 연동 ... 디도스 공격
 * 						}
 * 			------------------------
 * 		}
 */
public class 클래스_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
