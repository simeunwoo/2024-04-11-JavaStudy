/*
 * 	객체 지향 프로그램 => 자바 (CBD) => 데이터 관리
 * 	-------------	=> 이미 필요한 기능은 존재 => 조립해서 만드는 프로그램 (레고 느낌)
 * 	1. 클래스
 * 		= 변수 설정 (어떤 데이터가 필요한지) : 캡슐화 (데이터 보호) => getter/setter
 * 		  -------
 * 			기본형 => 정수, 실수, 문자, 논리
 * 			배열
 * 			클래스 => 포함 클래스
 * 			1) 요구사항
 * 				=> 데이터 선언
 * 				=> 데이터 선언 => 데이터 수집 => 데이터 분석 => 데이터 분리 => 데이터 예측
 * 				   ------------------------------------------------------- 머신러닝 / 딥러닝
 * 																		   -------------
 * 																			| 예측 => 프로그램 제작 (AI)
 * 			2) 기능 설정 : 목록 / 상세보기 / 예약 / 결제 ... => 메소드
 * 			   --------------------------------------------
 * 				변수 + 메소드 => 한개의 기능 => 설계 (클래스) => 활용 => 객체
 * 				---------- 객체에 의하여 관리
 * 				메소드 => 기능이 변경 => 사용자가 요구 : 오버라이딩
 * 		= 변수에 초기값 : 생성자 => 서버/데이터베이스 (미리 연결)
 * 		= 변수를 활용 : 메소드 => 기능 (수정, 추가) => 다형성 (오버로딩/오버라이딩)
 * 	2. 접근지정어 => public / private / protected / default (접근 범위 지정) => 127page
 * 	3. 포함 / 상속 => 재사용기법
 * 					있는 그대로 사용 : 포함 => Spring => POJO
 * 					변경해서 사용 : 상속 => Window, 네트워크, 스레드
 * 	4. 클래스의 종류
 * 		= 일반 클래스 ***
 * 		= 추상 클래스
 * 		= 인터페이스 ***
 * 		= 내부 클래스
 * 			= 멤버 클래스 ***
 * 			= 익명의 클래스 ***
 * 			= 지역 클래스
 * 		= 종단 클래스
 * 	5. 조립법
 * 		= 패키지 => 관련 클래스끼리 모아서 관리 : import
 * 		  ---- 폴더 java, javax
 * 	6. 예외처리 : 프로그램의 비정상 종료 방지, 사전 에러를 방지
 * 									------------
 * 									파일 : 경로명, 파일명
 * 									네트워크 : URL / Server IP
 * 											---- Jsoup
 * 	------------------- 기본 문법 (8장) => 프로그램 개발
 * 	7. 라이브러리 (자바), 외부에서 지원 (Jsoup, lombok)
 * 					 -------------------------- mvnrepository.com
 * 	J2SE (여기까지는 일반 자바)
 * 	--------------------------------------------------------------
 * 	J2EE : 웹 개발 => JSP / Srvlet (기업용 환경)
 *	-------------------------------------------------------------- maven, spring-boot
 * 
 * 	=> 기본 이론, 구현 => 웹 (구현)
 * 	   ------- 면접
 * 
 * 	객체지향의 3대 특성 (캡슐화, 상속, 다형성) => 면접 (99.9%)
 */
public class 접근지정어_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
