package com.sist.main;
/*
 * 	클래스 구성 요소
 * 	------------
 * 	*** 클래스 블록
 * 	class ClassName
 * 	{
 * 		=> 구현 불가능
 * 		=> 선언만 가능
 * 		   ---------
 * 			1. 변수 : 한개만 저장 가능
 * 			2. 클래스 (사용자 정의 데이터형) : 여러개 저장 가능
 * 			3. 배열 : 여러개 저장 가능
 * 	}
 * 
 * 	선언 : int a ...
 * 	구현 : 제어문 / 연산 처리 / 파일 읽기 / 크롤링 / 메소드 호출 ... => 메소드 처리, 생성자, 초기화 블록을 이용 
 * 	------------------------
 * 	변수 : 프로그램에 필요한 데이터를 저장 공간 => 프로그램 종료 시까지 유지하는 변수 => 멤버변수
 * 			=> 자동 초기화 (default)
 * 	------------------------
 * 	### 변수 => 초기화 (변수는 초기값이 없는 상태에서는 메모리에 저장이 안됨)
 * 
 * 	### 생성자 => 특징 : 일반 메소드와 다르다
 * 		1) 클래스명과 동일
 * 		2) 리턴형이 없다 => void(리턴형) (X)
 * 			예) class A
 * 				{
 * 					void A(){} => 일반 메소드
 * 					A(){} => 생성자
 * 				}
 * 		3) 여러개의 생성자를 만들 수 있다
 * 		같은 이름의 메소드를 여러개 제작 가능 (오버로딩)
 * 		= 오버로딩 : 같은 이름의 메소드로 새로운 기능을 추가
 * 		1. 메소드명이 동일
 * 		2. 매개변수의 갯수나 데이터형이 다르다
 * 		3. 리턴형은 관계 없다
 * 		4. 접근지정어는 관련이 없다
 * 		예) plus(int a,int b) => plus(int,int)
 * 			plus(double d, double d2) => plus(double,double)
 * 			plus(int a,double d)
 * 			메소드 이름이 다 다르면 나중에 설계할 때 다 찾아오기 힘들어서 => 메소드 이름을 같게 만들 수 있다
 * 		4) 생성자의 역할 => 역할이 필요 없는 경우도 있기 때문에 생략 가능
 * 			*** 반드시 생성자는 필요하다
 * 			*** 생략이 된 경우에는 생성자를 추가 (컴파일러)
 * 			1. 멤버변수의 초기화를 담당
 * 			2. 클래스를 메모리에 저장할 때 호출되는 메소드
 * 			3. 시작과 동시에 처리해야하는 기능이 있는 경우 : 화면 UI, 오라클 연결, 서버 연결, 웹 => 자동 로그인
 * 		5) 생성자 호출
 * 			=> new 생성자() : new 없이 호출하면 오류 발생
 * 
 * 	### 초기화 블록 : 호출 없이 자동으로 처리
 * 		인스턴스 변수
 * 		{
 * 			구현 후 초기화
 * 		}
 * 		정적 변수 (static)
 * 		{
 * 			static 변수의 초기화
 * 		}
 * 
 * 		*** 초기화 방법
 * 		1) 명시적인 초기화
 * 			int a=100;
 * 		2) 초기화 블록
 * 			int a;
 * 			{
 * 				a=100;
 * 			}
 * 		3) 생성자
 * 			int a;
 * 			생성자()
 * 			{
 * 				a=100;
 * 			}
 * 	------------------------
 * 	------------------------
 */
public class 클래스구성요소_변수 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println();
	}

}
